/* description: Parses end executes mathematical expressions. */

/* lexical grammar */
%lex
%%

\s+                   /* skip whitespace */
[0-9]+("."[0-9]+)?\b  return 'NUMBER'
"*"                   return '*'
"/"                   return '/'
"-"                   return '-'
"+"                   return '+'
"^"                   return '^'
"("                   return '('
")"                   return ')'
"x"                   return 'X'
"y"                   return 'Y'
"pi"                  return 'pi'
"e"                   return 'e'
"sin"                 return 'sin'
"cos"                 return 'cos'
"tan"                 return 'tan'
<<EOF>>               return 'EOF'
.                     return 'INVALID'

/lex

/* operator associations and precedence */

%left '+' '-'
%left '*' '/'
%left '^'
%left UMINUS

%start expressions

%% /* language grammar */

expressions
    : e EOF
        {return $1;}
    ;

e
    : e '+' e
        {$$ = $1+$3;}
    | e '-' e
        {$$ = $1-$3;}
    | e '*' e
        {$$ = $1*$3;}
    | e '/' e
        {$$ = $1/$3;}
    | e '^' e
        {$$ = Math.pow($1, $3);}
    | '-' e %prec UMINUS
        {$$ = -$2;}
    | '(' e ')'
        {$$ = $2;}
    | sin '(' e ')'
        {$$ = Math.sin( $3 ); }
    | cos '(' e ')'
        {$$ = Math.cos( $3 ); }
    | tan '(' e ')'
        {$$ = Math.tan( $3 ); }
    | NUMBER
        {$$ = Number(yytext);}
    | e
        {$$ = Math.E;}
    | pi
        {$$ = Math.PI;}
    | x
        {$$ = 1;}
    | y
        {$$ = 2;}
    ;
